@page "/amp/blog/{categoryalias}/{blogalias}/{lang}"
@model SelectedBlogModel


<!DOCTYPE html>
<html lang="@Model.Lang" ⚡>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="@Model.SelectedBlog.Description"/>
    <meta name="keywords" content="bot-market, bot, telegram, bot creating, blog about telegram bots, telegram bot's shop" />
    <meta name="robots" content="all" />
    <meta property="og:image" content="@("https://bot-market.com" + Model.SelectedBlog.Image == "" ? "/common_imgs/bot.png" : Model.SelectedBlog.Image)"/>
    <meta property="og:site_name" content="@Model.SelectedTitle.HeadTitle BOT-MARKET"/>
    <meta property="og:title" content="@Model.SelectedBlog.Title"/>
    <meta property="og:description" content="@Model.SelectedBlog.Description"/>
    <title>@Model.SelectedBlog.Title</title>
    <link rel="icon" href="~/common_imgs/icon/favicon.ico">
    <link rel="canonical" href="https://bot-market.com/blog/@(Model.CatAlias)/@(Model.BlogAlias)/@Model.Lang" />
    <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@("@")-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@("@")-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@("@")-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@("@")-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@("@")keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>
    <script async src="https://cdn.ampproject.org/v0.js"></script>
    <style amp-custom>
        body {
            font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
        }

        body a{
            font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
            text-decoration: none;
            outline: none;
        }


        section {
            background-color: white;
            position: relative;
            transition: 0.5s ease;
        }


        .header{
            display: flex;
            flex-direction: column;
        }


        .s-title {
            color: #336699;
            font-size: 30px;
            font-weight: 800;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            padding:5px;
        }

            .s-title span {
                margin-right: 10px;
                margin-bottom: 1px
            }

        .title-logo-img {
            height: 20px;
            width: auto;
        }

        .s-description {
            font-size: 20px;
            color: #4D4D4D;
        }

        .s-description a{
            color: #336699;
        }

        .h-menu-line {
            background-color: #336699;
            padding-left: 25px;
            color: white;
            display: flex;
        }

        .h-menu-line a{
            color: white;
            font-size: 18px;
            padding-left: 15px;
            padding-right: 15px;
            text-align: center;
            padding-top: 20px;
            padding-bottom: 20px;
            font-weight: 100;
        }

        .menu-active{
            background: rgb(110, 140, 178);
        }

        .main{
            display: flex;
            padding: 25px;
            flex-direction:column;
        }

        .blog-part{
            display: flex;
            flex-direction: column;
            width: 100%;
        }

        .side-bar{
            display: flex;
            gap:15px;
            justify-content:space-between;
            margin-top:50px;
        }

        .rubrics{
            display: flex;
            flex-direction: column;
        }

        .r-title {
            font-size: 25px;
            font-weight: 700;
            color: #4D4D4D;
            margin-bottom: 20px;
        }

        .cat-list{
            display: flex;
            flex-direction: column;
            width: 295px;
        }

        .cat-group{
            margin-bottom: 20px;
            font-size: 18px;
            display: flex;
            align-items: center;
            padding-bottom: 5px;
            border-bottom: 1px solid rgb(104, 98, 98);
        }

        .rubric-img{
            height: 20px;
            margin-right: 10px;
        }

        .cat-group a {
            outline: none;
            text-decoration: none;
            color: #336699;
        }

        .footer {
        padding: 25px;
        display: flex;
        flex-direction: column;
        font-family: Arial, Helvetica, sans-serif;
        background-color: #4D4D4D;
        position: relative;
        overflow: hidden;
        }

        .circle {
            background-color: white;
            width: 300px;
            height: 300px;
            border-radius: 50%;
            position: absolute;
            opacity: 0.5;
        }

        .left-circle {
            top: -120px;
            left: -100px;
            background-color: #336699
        }

        .right-circle {
            right: -100px;
            bottom: -120px;
            background-color: #808080
        }

        .f-title {
            color: white;
            font-weight: 600;
            margin-bottom: 20px;
        }

        .f-desc {
            font-size: 14px;
            color: white
        }

        .link-container {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
            margin-top: 40px;
            z-index: 10;
        }

        .link-ref img {
            height: 40px;
            width: auto;
        }

        .units {
            display: flex;
            flex-direction: column;
            background-color: #CCCCCC;
            padding: 10px;
        }

        .units a{
            font-size: 18px;
            font-family:Arial, Helvetica, sans-serif;
            margin-bottom: 20px;
            color: #336699;
            transition: 0.3s ease;
            width:fit-content;
        }

        .units a:hover{
            color: rgb(225, 145, 32);
        }

        .units a span{
            color: rgb(104, 98, 98);
            margin-right: 10px;
        }

        .h-subsection{
            margin-left: 20px;
        }

        .h-subsection:hover{
            margin-left: 30px;
        }

        .h-section:hover{
            margin-left: 10px;
        }

        .blog-header{
            display: flex;
            flex-direction: column;
            margin-bottom: 10px;
        }

        .blog-title{
            margin-bottom: 20px;
            font-size:26px;
        }

        .blog-data {
            font-family: Arial, Helvetica, sans-serif;
            color: #4D4D4D;
            margin-right: 15px;
        }

        .blog-units-intro {
            display: flex;
            flex-direction: column;
            border-top: 2px solid #336699;
            padding-top: 30px;
            gap: 20px;
        }

        .units-intro {
            display:flex;
            flex-direction:column;
        }

        .blog-intro {
            display:flex;
            gap:10px;
            flex-direction:column-reverse;
            align-items:flex-start;
        }

        .blog-text{
            font-family:Arial, Helvetica, sans-serif;
            font-size: 20px;
            font-weight: 500;
            margin:0;
            word-break:break-word;
            text-indent:20px;
        }

        .blog-image{
            width:300px;
            height:auto;
            border-radius:10px;
        }

        .p-blog-image{
            width:300px;
            height:auto;
            border-radius:10px;
        }

        .blog-main-part{
            margin-top: 10px;
            display: flex;
            flex-direction: column;
        }

        .section-title{
            margin-bottom: 10px;
            margin-top:10px;
            font-size:25px
        }

        .subsection-title{
            margin-left: 15px;
            font-size:23px;
        }

        .blog-paragraph{
            margin-left: 15px;
            margin-bottom:20px;
        }
    </style>
</head>
<body>
    <div><img src="https://mc.yandex.ru/watch/98263205" style="position:absolute; left:-9999px;" alt="" /></div>
    <section>
        <div class="header">
            <div class="author-short-data" dir=@(Model.Lang == "ar" ? "rtl" : "")>
                <h1 class="s-title">
                    <span>@Model.SelectedTitle.HeadTitle</span>
                    <img class="title-logo-img" src="~/common_imgs/title_logo.png"/>
                </h1>
            </div>
            <div class="h-menu-line" dir=@(Model.Lang == "ar" ? "rtl" : "")>
                <a href="/blog/main/@Model.Lang">@Model.SelectedTitle.MainRef</a>
                <a href="/blog/all/@Model.Lang">@Model.SelectedTitle.BlogsRef</a>
            </div>
        </div>
        <div class="main">
            <div class="blog-part" dir=@(Model.Lang == "ar" ? "rtl" : "")>
                <div class="blog-header">
                    <h2 class="blog-title">
                        @Html.Raw(Model.SelectedBlog.Title)
                    </h2>
                </div>
                <div class="blog-units-intro">
                    <div class="blog-intro">

                        <div class="blog-text">
                            @Html.Raw(Model.SelectedBlog.Description)
                        </div>

                        @if (!string.IsNullOrEmpty(Model.SelectedBlog.Image))
                        {
                            <img class="blog-image imagination" src="@Model.SelectedBlog.Image" alt="@Model.SelectedBlog.Title">
                        }
                        else
                        {
                            <img class="blog-image imagination" src="~/common_imgs/bot.png" alt="@Model.SelectedBlog.Title">
                        }
                    </div>
                    <div class="units-intro">

                        <div class="units">

                            @{
                                int secCount = 1;
                            }

                            @foreach (var sec in Model.SelectedBlog.Sections)
                            {

                                int subCount = 1;

                                <a href="#sec-@sec.Id" class="h-section">
                                    <span>@secCount.</span> @Html.Raw(sec.Title)
                                </a>

                                foreach (var sub in sec.Subsections)
                                {
                                    <a href="#sub-@sub.Id" class="h-subsection">
                                        <span>@secCount.@subCount</span> @Html.Raw(sub.Title)
                                    </a>

                                    subCount++;
                                }

                                secCount++;
                            }
                        </div>
                    </div>
                </div>
                <div class="blog-main-part">

                    @foreach (var sec in Model.SelectedBlog.Sections)
                    {
                        <h3 id="sec-@sec.Id" class="section-title">
                            @Html.Raw(sec.Title)
                        </h3>

                        foreach (var sub in sec.Subsections)
                        {
                            <h4 id="sub-@sub.Id" class="subsection-title">
                                @Html.Raw(sub.Title)
                            </h4>

                            int pars = 1;

                            foreach (var par in sub.Paragraphs)
                            {
                                <div class="blog-paragraph">
                                    <div class="blog-text">@Html.Raw(par.Text)</div>
                                    @if (!string.IsNullOrEmpty(par.Image))
                                    {
                                        <div class="blog-image-container">
                                            <img class="p-blog-image" src="@par.Image" alt="@sub.Title-@pars">
                                        </div>

                                        pars++;
                                    }
                                </div>
                            }
                        }
                    }
                </div>
            </div>
            <div class="side-bar" dir=@(Model.Lang == "ar" ? "rtl" : "")>
                <div class="rubrics">
                    <span class="r-title">
                        @Model.SelectedTitle.CatTitle
                    </span>
                    <div class="cat-list">
                        @if (Model.Categories.Count() > 0)
                        {
                            foreach (var cat in Model.Categories)
                            {
                                <div class="cat-group">
                                    @if (Model.Lang != "ar")
                                    {
                                        <img src="~/common_imgs/arrow.png" class="rubric-img" alt="">
                                    }
                                    <a href="/blog/all/@cat.Alias/@HttpContext.Session.GetString("lang")" class="cat-element">@cat.CategoryName</a>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="footer" dir=@(Model.Lang == "ar" ? "rtl" : "")>
            <span class="f-title">© @DateTime.Now.Year.ToString() @Model.SelectedTitle.HeadTitle bot-market</span>
            <span class="f-desc">
                @Model.SelectedTitle.WarningInfo
            </span>
            <div class="link-container">
               <a href="#" class="link-ref">
                   <img src="~/common_imgs/icons8-instagram-96.png"/>
               </a>
               <a href="#" class="link-ref">
                   <img src="~/common_imgs/icons8-telegram-96.png"/>
               </a>
               <a href="#" class="link-ref">
                   <img src="~/common_imgs/icons8-youtube-96.png"/>
               </a>
            </div>
        </div>
    </section>
</body>
</html>


@functions{
    public class SelectedBlogModel : PageModel
    {
        private IBlogRepository blogRepository;

        private ICategoryRepository categoryRepository;

        public SelectedBlogModel(IBlogRepository blogRepository, ICategoryRepository categoryRepository)
        {
            this.blogRepository = blogRepository;

            this.categoryRepository = categoryRepository;
        }

        public Blog SelectedBlog { get; set; }

        public List<Category> Categories { get; set; } = new List<Category>();

        [BindProperty]
        public string Lang { get; set; }

        public Title SelectedTitle { get; set; }

        public List<Language> Languages { get; set; } = new List<Language>();

        public Category SelectedCategory { get; set; }

        public string CatAlias { get; set; }

        public string BlogAlias { get; set; }

        [BindProperty]
        public bool IsChangeLanguage { get; set; } = false;

        public async Task<IActionResult> OnGetAsync(string categoryalias, string blogalias, string lang)
        {
            try
            {
                SelectedBlog = await blogRepository.GetBlogByAliasAndLanguageAsync(blogalias, lang);
            }
            catch (Exception)
            {
                return Redirect("/blog/main");
            }

            Categories = await categoryRepository.GetCategoriesOnSpecificLanguageAsync(lang);

            SelectedCategory = Categories.First(c => c.Alias == categoryalias);

            SelectedTitle = await blogRepository.GetTitleByLangCodeAsync(lang);

            List<Language> languages = await blogRepository.GetAllLangsAsync();

            foreach (var language in languages)
            {
                Blog blog;

                try
                {
                    blog = language.Blogs.First(b => b.Alias == blogalias);

                    Languages.Add(language);
                }
                catch
                {
                }
            }

            Lang = lang;

            CatAlias = categoryalias;

            BlogAlias = blogalias;

            HttpContext.Session.SetString("selected_categoryalias", categoryalias);

            HttpContext.Session.SetString("selected_blogalias", blogalias);

            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (IsChangeLanguage)
            {
                try
                {
                    string? categoryAlias = HttpContext.Session.GetString("selected_categoryalias");

                    string? blogAlias = HttpContext.Session.GetString("selected_blogalias");

                    CatAlias = categoryAlias;

                    BlogAlias = blogAlias;

                    HttpContext.Session.SetString("lang", Lang);

                    return Redirect($"/blog/{categoryAlias}/{blogAlias}/{Lang}");
                }
                catch (Exception)
                {
                    return Page();
                }
            }

            return Page();
        }
    }
}

